apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId "com.blackcandle.trainingmgr"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation rootProject.ext.dependencies.publicImplementation
    implementation 'androidx.navigation:navigation-fragment:2.3.0'
    implementation 'androidx.navigation:navigation-ui:2.3.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    // 引用本地库
    rootProject.ext.dependencies.other.each {
        implementation project(it)
    }
    // 这⾥要⽤annotationProcessor让编译器知道这是⼀个注解处理器
    // 编译时，才会调用注解处理器生成文件，生成目录在build/source/apt下面
    annotationProcessor project(path: ':annotation_compiler')
    // 如果其他组件编译成Library，才进行依赖
    if (!rootProject.ext.android.is_application) {
        implementation project(path: ':addtraining')
        implementation project(path: ':settings')
    }
}